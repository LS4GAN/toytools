#!/usr/bin/env python
"""Split preprocessed dataset into training/test parts"""
# pylint: disable=missing-function-docstring

import argparse
import os

import numpy  as np
import pandas as pd
from toytools.collect import train_test_split

def parse_cmdargs():
    parser = argparse.ArgumentParser("View toyzero dataset")

    parser.add_argument(
        'path',
        help    = 'Path to the preprocessed dataset',
        metavar = 'PATH',
        type    = str,
    )

    parser.add_argument(
        '--shuffle',
        action  = 'store_true',
        dest    = 'shuffle',
        help    = 'Whether to shuffle data',
    )

    parser.add_argument(
        '-s', '--seed',
        default = 0,
        dest    = 'seed',
        help    = 'Whether to shuffle data',
        type    = int,
    )

    parser.add_argument(
        '--test-size',
        default = 0.2,
        dest    = 'test_size',
        help    = (
            'Size of the test dataset.'
            'If test-size <= 1, then it is interpreted as a fraction'
        ),
        type    = float,
    )

    return parser.parse_args()

def load_dataset(path):
    return pd.read_csv(path, index_col = 'index')

def split_into_train_test_parts(df, test_size, shuffle, seed):
    prg = None

    if shuffle:
        prg = np.random.default_rng(seed)

    train_indices, test_indices = train_test_split(
        len(df), test_size, shuffle, prg
    )

    return (df.iloc[train_indices], df.iloc[test_indices])

def get_savename(path, is_train = True):
    base_path, ext = os.path.splitext(path)

    if is_train:
        return base_path + '-train' + ext
    else:
        return base_path + '-test' + ext

def main():
    cmdargs = parse_cmdargs()

    df = load_dataset(cmdargs.path)

    df_train, df_test = split_into_train_test_parts(
        df, cmdargs.test_size, cmdargs.shuffle, cmdargs.seed
    )

    df_train.to_csv(get_savename(cmdargs.path, is_train = True))
    df_test .to_csv(get_savename(cmdargs.path, is_train = False))

if __name__ == '__main__':
    main()

