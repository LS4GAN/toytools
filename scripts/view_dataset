#!/usr/bin/env python
"""Make plots of toyzero dataset images"""
# pylint: disable=missing-function-docstring

import argparse
import tqdm

import matplotlib.pyplot as plt

from toytools.datasets import get_toyzero_dataset
from toytools.plot     import (
    save_figure, default_image_plot, get_common_images_range
)
from toytools.parsers  import (
    add_dataset_parser, add_dataset_args_parser, add_index_range_parser,
    add_colormap_parser, add_log_norm_parser, add_symmetric_norm_parser,
    parse_index_range
)

def parse_cmdargs():
    parser = argparse.ArgumentParser("View toyzero dataset")

    parser.add_argument(
        'path',
        help    = 'Directory where toyzero dataset is located',
        metavar = 'PATH',
        type    = str,
    )

    parser.add_argument(
        '--plotdir',
        default = None,
        dest    = 'plotdir',
        help    = (
            'Directory where to save plots. If not specified then this '
            'script will be run in the interactive mode.'
        ),
        type    = str,
    )

    parser.add_argument(
        '--ext',
        default = 'png',
        dest    = 'ext',
        help    = 'Plot extensions',
        type    = str,
        nargs   = '+',
    )

    add_dataset_parser(parser)
    add_dataset_args_parser(parser)
    add_index_range_parser(parser)
    add_colormap_parser(parser)
    add_log_norm_parser(parser)
    add_symmetric_norm_parser(parser)

    return parser.parse_args()

# pylint: disable=too-many-arguments
def plot_image_pair(
    img_fake, img_real, cmap, log, symmetric, vertical = False
):
    subplots_kwargs = {
        'sharex' : True, 'sharey' : True, 'constrained_layout' : True,
    }

    if vertical:
        f, axs = plt.subplots(2, 1, **subplots_kwargs)
    else:
        f, axs = plt.subplots(1, 2, **subplots_kwargs)

    plot_kwargs = {
        'vrange' : get_common_images_range(
            (img_fake, img_real), symmetric = symmetric
        ),
        'cmap'   : cmap,
        'log'    : log,
    }

    aximg_fake = default_image_plot(axs[0], img_fake, **plot_kwargs)
    _          = default_image_plot(axs[1], img_real, **plot_kwargs)

    axs[0].set_title('Fake')
    axs[1].set_title('Real')

    if vertical:
        f.colorbar(aximg_fake, ax = axs, location = 'right')
    else:
        f.colorbar(aximg_fake, ax = axs, location = 'bottom')

    return f, axs

# pylint: disable=too-many-arguments
def plot_single_sample(dataset, index, cmap, log, symmetric, plotdir, ext):
    img_fake, img_real = dataset[index]
    vertical = (img_fake.shape[1] > img_fake.shape[0])

    f, _ax = plot_image_pair(
        img_fake, img_real, cmap, log, symmetric, vertical
    )
    f.suptitle("Index: %d" % index)

    if plotdir is None:
        plt.show()
    else:
        save_figure(f, '%s/sample_%04d' % (plotdir, index), ext)

    plt.close(f)

def main():
    cmdargs = parse_cmdargs()
    dataset = get_toyzero_dataset(
        cmdargs.dataset, cmdargs.path, **cmdargs.data_args
    )

    index_range = parse_index_range(cmdargs.index, len(dataset))

    progbar = tqdm.tqdm(
        desc = 'Plotting', total = len(index_range), dynamic_ncols = True
    )

    for index in index_range:
        plot_single_sample(
            dataset, index, cmdargs.cmap, cmdargs.log, cmdargs.symmetric,
            cmdargs.plotdir, cmdargs.ext
        )
        progbar.update()

    progbar.close()

if __name__ == '__main__':
    main()

