#!/usr/bin/env python
"""Split toyzero images into train/test/val parts"""
# pylint: disable=missing-function-docstring

import argparse
import json
import os
import multiprocessing
import shutil

from collections import namedtuple

import numpy as np
import pandas as pd

import tqdm

from toytools.consts import (
    DIR_FAKE, DIR_REAL, SPLIT_TRAIN, SPLIT_TEST, SPLIT_VAL
)
from toytools.collect import train_val_test_split, collect_toyzero_images

Config = namedtuple(
    'Config',
    [ 'root', 'outdir', 'seed', 'shuffle', 'test_size', 'val_size' ]
)

def parse_cmdargs():
    parser = argparse.ArgumentParser(
        "Extract center crops from toyzero dataset"
    )

    parser.add_argument(
        'root',
        help    = 'path to the toyzero dataset',
        metavar = 'PATH',
        type    = str,
    )

    parser.add_argument(
        'outdir',
        help    = 'directory where to save cropped dataset',
        metavar = 'OUTDIR',
        type    = str,
    )

    parser.add_argument(
        '--shuffle',
        action  = 'store_true',
        dest    = 'shuffle',
        help    = 'whether to shuffle data',
    )

    parser.add_argument(
        '--seed',
        default = 0,
        dest    = 'seed',
        help    = 'seed of a pseudo random generator',
        type    = int,
    )

    parser.add_argument(
        '--val-size',
        default = 0,
        dest    = 'val_size',
        help    = (
            'size of the validation dataset. '
            'If val-size <= 1, then it is interpreted as a fraction'
        ),
        type    = float,
    )

    parser.add_argument(
        '--test-size',
        default = 0.2,
        dest    = 'test_size',
        help    = (
            'size of the test dataset. '
            'If test-size <= 1, then it is interpreted as a fraction'
        ),
        type    = float,
    )

    return parser.parse_args()

class CopyingWorker:
    # pylint: disable=missing-class-docstring

    def __init__(self, root, outdir_real, outdir_fake):
        self._root        = root
        self._outdir_real = outdir_real
        self._outdir_fake = outdir_fake

    def __call__(self, index_fname):
        (index, fname) = index_fname

        path_real = os.path.join(self._root, DIR_REAL, fname)
        path_fake = os.path.join(self._root, DIR_FAKE, fname)

        fname_out = f'sample_{index}.npz'

        shutil.copy(path_real, os.path.join(self._outdir_real, fname_out))
        shutil.copy(path_fake, os.path.join(self._outdir_fake, fname_out))

        return (index, fname, fname_out)

def create_config_from_cmdargs(cmdargs):
    return Config(
        root      = cmdargs.root,
        outdir    = cmdargs.outdir,
        seed      = cmdargs.seed,
        shuffle   = cmdargs.shuffle,
        test_size = cmdargs.test_size,
        val_size  = cmdargs.val_size,
    )

def prepare_image_lists(config):
    images = collect_toyzero_images(config.root)
    prg    = np.random.default_rng(config.seed)

    train_indices, val_indices, test_indices = train_val_test_split(
        len(images), config.val_size, config.test_size, config.shuffle, prg
    )

    train_images = [ images[i] for i in train_indices ]
    val_images   = [ images[i] for i in val_indices   ]
    test_images  = [ images[i] for i in test_indices  ]

    return (train_images, val_images, test_images)

def extract_images(config, split, images, rename_map):
    outdir_split = os.path.join(config.outdir,  split)
    outdir_real  = os.path.join(outdir_split,   DIR_REAL)
    outdir_fake  = os.path.join(outdir_split,   DIR_FAKE)

    os.makedirs(outdir_real, exist_ok = True)
    os.makedirs(outdir_fake, exist_ok = True)

    progbar = tqdm.tqdm(
        desc = 'Splitting', total = len(images), dynamic_ncols = True
    )

    worker = CopyingWorker(config.root, outdir_real, outdir_fake)

    with multiprocessing.Pool() as pool:
        for (index, fname_src, fname_dst) in pool.imap_unordered(
            worker, enumerate(images)
        ):
            rename_map.append((split, index, fname_dst, fname_src))
            progbar.update()

    progbar.close()

def save_config(config):
    config_path = os.path.join(config.outdir, 'config.json')
    config_dict = {
        'script'    : 'toyzero/train_test_split',
        'seed'      : config.seed,
        'shuffle'   : config.shuffle,
        'test_size' : config.test_size,
        'val_size'  : config.val_size,
    }

    with open(config_path, 'wt') as f:
        json.dump(config_dict, f, indent = 4)

def save_map(config, rename_map):
    map_path = os.path.join(config.outdir, 'map.csv')

    rename_map.sort()

    df = pd.DataFrame(
        rename_map, columns = [ 'split', 'index', 'fname_dest', 'fname_src' ]
    )
    df.to_csv(map_path, index = False)

def main():
    cmdargs = parse_cmdargs()
    config  = create_config_from_cmdargs(cmdargs)

    if os.path.exists(config.outdir):
        raise RuntimeError(
            f"Output directory {config.outdir} exists. Refusing to overwrite."
        )

    train_images, val_images, test_images = prepare_image_lists(config)
    rename_map = []

    if len(train_images) > 0:
        print("Extracting train images...")
        extract_images(config, SPLIT_TRAIN, train_images, rename_map)

    if len(test_images) > 0:
        print("Extracting test images...")
        extract_images(config, SPLIT_TEST, test_images, rename_map)

    if len(val_images) > 0:
        print("Extracting val images...")
        extract_images(config, SPLIT_VAL, val_images, rename_map)

    save_config(config)
    save_map(config, rename_map)

if __name__ == '__main__':
    main()

