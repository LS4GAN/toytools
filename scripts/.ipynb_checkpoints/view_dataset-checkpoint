#!/usr/bin/env python
"""Make plots of toyzero dataset images"""
# pylint: disable=missing-function-docstring

import argparse
import json
import re
import tqdm

import matplotlib.pyplot as plt

from toytools.datasets import get_toyzero_dataset
from toytools.plot     import (
    save_figure, default_image_plot, get_common_images_range
)

def parse_cmdargs():
    parser = argparse.ArgumentParser("View toyzero dataset")

    parser.add_argument(
        'path',
        help    = 'Directory where toyzero dataset is located',
        metavar = 'PATH',
        type    = str,
    )

    parser.add_argument(
        '--dataset',
        choices = [
            'toyzero-simple', 'toyzero-presimple', 'toyzero-precropped',
            'toyzero-preunaligned'
        ],
        default = 'simple',
        dest    = 'dataset',
        help    = 'Type of the toyzero Dataset to use.',
        type    = str,
    )

    parser.add_argument(
        '--data_args',
        default = {},
        dest    = 'data_args',
        help    = (
            "JSON dict of data_args parameters. "
            "Example: '{ \"seed\": 1, \"val_size\": 0.4  }'"
        ),
        type    = json.loads,
    )

    parser.add_argument(
        '-i',
        default = None,
        dest    = 'index',
        help    = \
            'Index or range of indices [first:last) of the samples to plot',
        type    = str,
    )

    parser.add_argument(
        '--plotdir',
        default = None,
        dest    = 'plotdir',
        help    = (
            'Directory where to save plots. If not specified then this '
            'script will be run in the interactive mode.'
        ),
        type    = str,
    )

    parser.add_argument(
        '--ext',
        default = 'png',
        dest    = 'ext',
        help    = 'Plot extensions',
        type    = str,
        nargs   = '+',
    )

    return parser.parse_args()

def plot_image_pair(img_fake, img_real, vertical = False):

    subplots_kwargs = {
        'sharex' : True, 'sharey' : True, 'constrained_layout' : True,
    }

    if vertical:
        f, axs = plt.subplots(2, 1, **subplots_kwargs)
    else:
        f, axs = plt.subplots(1, 2, **subplots_kwargs)

    color_range = get_common_images_range((img_fake, img_real))

    aximg_fake = default_image_plot(axs[0], img_fake, *color_range)
    _          = default_image_plot(axs[1], img_real, *color_range)

    axs[0].set_title('Fake')
    axs[1].set_title('Real')

    if vertical:
        f.colorbar(aximg_fake, ax = axs, location = 'right')
    else:
        f.colorbar(aximg_fake, ax = axs, location = 'bottom')

    return f, axs

def plot_single_sample(dataset, index, plotdir, ext):
    img_fake, img_real = dataset[index]
    vertical = (img_fake.shape[1] > img_fake.shape[0])

    f, _ax = plot_image_pair(img_fake, img_real, vertical)
    f.suptitle("Index: %d" % index)

    if plotdir is None:
        plt.show()
    else:
        save_figure(f, '%s/sample_%04d' % (plotdir, index), ext)

    plt.close(f)

def parse_index_range(dataset, index):
    if index is None:
        return range(len(dataset))

    if index.isnumeric():
        index = int(index)
        return range(index, index + 1)

    range_re = re.compile(r'(\d*):(\d*)')
    match    = range_re.match(index)

    if not match:
        raise ValueError("Failed to parse index range: '%s'" % index)

    first, last = [ (int(x) if x != '' else None) for x in match.groups() ]
    index_slice = slice(first, last)

    return range(*index_slice.indices(len(dataset)))

def main():
    cmdargs = parse_cmdargs()
    dataset = get_toyzero_dataset(
        cmdargs.dataset, cmdargs.path, **cmdargs.data_args
    )

    index_range = parse_index_range(dataset, cmdargs.index)

    progbar = tqdm.tqdm(
        desc = 'Plotting', total = len(index_range), dynamic_ncols = True
    )

    for index in index_range:
        plot_single_sample(dataset, index, cmdargs.plotdir, cmdargs.ext)
        progbar.update()

    progbar.close()

if __name__ == '__main__':
    main()

